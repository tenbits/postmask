// Generated by dts-bundle v0.7.3

declare module 'postmask' {
    import { Result } from 'postmask/Result';
    import { IOptions, IGlobalOptions } from 'postmask/options';
    import { IOptimizer } from 'postmask/single/Optimizer';
    export { Result, IOptimizer };
    export function optimizeAsync(source: string, path: string, options?: IOptions): Promise<Result>;
    export function registerOptimizer(pattern: string, fn: IOptimizer): void;
    export function removeOptimizer(): void;
    export function configurate(config: IGlobalOptions): void;
}

declare module 'postmask/Result' {
    export class Report {
        errors: Message[];
        warnings: Message[];
        result: string;
    }
    export class Message {
        message: string;
        line?: number;
        col?: number;
        source?: string;
        level: 'error' | 'warning' | 'info';
        middleware?: string;
    }
    export class Result<T = string> {
        result: T;
        report: Report;
    }
}

declare module 'postmask/options' {
    export interface IOptions {
        minify?: boolean;
        base?: string;
        plugins?: string[];
        settings?: {
            [key: string]: any;
        };
        [key: string]: any;
    }
    export interface IGlobalOptions {
        mask?: any;
        io?: any;
        [key: string]: any;
    }
    export const Default: IOptions;
    export function prepare(options: any): IOptions;
}

import { Report, Result } from 'postmask/Result';
import { IOptions } from 'postmask/options';
export interface IContext {
    report: Report;
    filename: string;
}
export interface IOptimizer {
    (node: any, ctx: IContext, next: INext): any;
}
export interface INext {
    (node?: any): any;
}
export interface IOptimizerCollection {
    name: string;
    fns: IOptimizer[];
    priorities: string[];
}
export declare class OptimizerCtor {
    optimizers: {
        [name: string]: IOptimizerCollection;
    };
    optimizeAsync(source: string, path: string, opts?: IOptions): Promise<Result>;
    /**
      *
      * @param pattern eg. 'style';`*` ~ `*:before`, `*:after`
      * @param fn
      */
    registerOptimizer(pattern: string, fn: IOptimizer): void;
    removeOptimizer(): void;
    getOptimizers(name: any): IOptimizer[];
}
declare const _default: OptimizerCtor;
export default _default;

